/**
 * Cinema8 Player JS API
 */
 (function() {
	    $$cinema8Conf = {"instances": {}, "eventListenerCreated": false};
        this.Cinema8Player = function(_selector, options){
            this.options = options;

            if(isNull(_selector)){
                return this;
            }

            if (options == null) {
                return this;
            }

            this.setDefaults();
            this.element = document.querySelector(_selector);

            var _this = this;
            
            if(!$$cinema8Conf.eventListenerCreated){
                $$cinema8Conf.eventListenerCreated = true;
	            // Create IE + others compatible event handler
	            var eventMethod = window.addEventListener ? "addEventListener" : "attachEvent";
	            var eventer = window[eventMethod];
	            var messageEvent = eventMethod == "attachEvent" ? "onmessage" : "message";
	            
	            // Listen to message from child window
	            eventer(messageEvent, function (e) {
	                if("ivideoapi://" == e.data.substring(0, 12)){
	                    var msg = JSON.parse(e.data.split("ivideoapi://")[1]);
	                    
	                    var instance = msg.instance;
	                    delete msg.instance;
	
	                    var _key = Object.getOwnPropertyNames(msg)[0]
	
	                    if(instance != null){
	                        _this = $$cinema8Conf.instances[instance];
	                    }
	                    
	                    switch (_key) {
	
	                        case "volume":
	                            _this._volume = msg.volume;
	                            break;
	                            
	                        case "video":
	                            _this._video= msg.video;
	                            break;
	
	                        case "currentTime":
	                            _this._currentTime = msg.currentTime;
	                            break;
	
	                        case "subtitles":
	                            _this._subtitles = msg.subtitles;
	                            break;
	
	                        case "paused":
	                            _this._paused = msg.paused;
	                            break;
	                            
	                        case "watchTime":
	                            _this._watchTime = msg.watchTime;
	                            break;
	                        case "data":
	                            _this._sceneData = msg.data;
	                            _this.name = _this._sceneData.name;
	                            break;
	                        case "contextChanged":
	                            _this._context= msg.contextChanged;
	                            break;
	                        		
	                        case "event":
	                            if(msg.event == "play"){
	                                _this.options.onplay();
	                            }else if(msg.event == "pause"){
	                                _this.options.onpause();
	                            }else if(msg.event == "ended"){
	                                _this.options.onend();
	                            }else if(msg.event == "timeupdate"){
	                                _this.options.onprogress();
	                            }else if(msg.event == "onunload"){
	                                _this.options.onunload();
	                            }else if(msg.event == "onbeforeunload"){
	                                _this.options.onbeforeunload();
	                            }else if(msg.event == "canplay"){
	                            	
	                            	if (options.connectSharesWithParent) {
	                                	var msg = {"name": "parentPlayerUrl", "value": window.location.href};
	                                	_this.sendMessage(msg);
	                                }
	                            	
	                                _this.options.onready();
	                            }else if(msg.event == "customcallback"){
	                    			_this.options.oncustomcallback(msg.params);
	                    		}
	
	                            break;
	                        default:
	                            break;
	                        }
	
	                }
	            }, false);
            
            }
            
            
            
            this.init();
            
            var msg = {"name": "externalVideoUrl", "value": options.externalVideoUrl};
            this.sendMessage(msg);
        }


        /**
        Cinema8Player.prototype.onPlayerReady = function(v){
            v.on = this.onPlayerReady.on;
            console.log("ONPLAYERREADYY APII");
            return v;
        }

        Cinema8Player.prototype.onPlayerReady.on = function(event){
            console.log(event);
            return this;
        }
        */
        this.Cinema8Player.prototype.init = function(){
            this.createIframe();
        }
        
        
        this.Cinema8Player.prototype.setDefaults = function(){
            if(this.options.host == undefined){
                this.options.host = 'https://cinema8.com';
            }

            if(this.options.width == undefined){
                this.options.width = '854px';
            }

            if(this.options.height == undefined){
                this.options.height = '480px';
            }
            
            if(this.options.style == undefined){
                this.options.style = '';
            }


            if (typeof this.options.onready !== "function") {
                this.options.onready = function(){};
            }
            if (typeof this.options.onplay !== "function") {
                this.options.onplay = function(){};
            }
            if (typeof this.options.onpause !== "function") {
                this.options.onpause = function(){};
            }
            if (typeof this.options.onprogress !== "function") {
                this.options.onprogress = function(){};
            }
            if (typeof this.options.onend !== "function") {
                this.options.onend = function(){};
            }
            if (typeof this.options.onunload !== "function") {  
                this.options.onunload = function(){}; 
            }
            if (typeof this.options.onbeforeunload !== "function") {  
                this.options.onbeforeunload = function(){}; 
            }
            if (typeof this.options.oncustomcallback !== "function") {  
                this.options.oncustomcallback = function(){}; 
            }
        }





        this.Cinema8Player.prototype.createIframe = function(selector){

            var generator = new IDGenerator();
            var iframe = document.createElement('iframe'),
            iframeId = 'cinema8-'+generator.generate();
            iframe.setAttribute('id', iframeId); // assign an id
            iframe.setAttribute('name', iframeId);
            iframe.setAttribute('allow', 'autoplay; fullscreen; microphone; camera');
            
            $$cinema8Conf.instances[iframeId] = this;
            
            this.iframeId = iframeId;

            // assign url
            var watchParam = "video";
            if(this.options.type == "RAW_VIDEO"){
                watchParam = "raw-video";
            }

            var _src = this.options.host+"/"+watchParam;
            if(this.options.id != null) {
                _src += "/" + this.options.id+"?c=js-api";
            }else{
            	_src += "?external=1";
            }
            
            if(this.options.autoplay != null) {
                var _autoplay = 1;
                this.options.autoplay ? _autoplay = 1 : _autoplay = 0;
                _src += "&autoplay="+_autoplay;
            }

            if(this.options.raw != null) {
                var _raw = 1;
                this.options.raw ? _raw = 1 : _raw = 0;
                _src += "&raw="+_raw;
            }

            if(this.options.subtitles != null) {
                _src += "&sub="+this.options.subtitles;
            }
            
            
            if(this.options.externalVideoUrl != null){
            	_src += "&externalVideoUrl="+encodeURIComponent(this.options.externalVideoUrl);
            }

            if(this.options.authToken != null){
            	_src += "&token="+this.options.authToken;
            }
            
            if(this.options.externalUser != null){
            	var externaUserQqueryStr = encodeURIComponent(JSON.stringify(this.options.externalUser));
            	_src += "&externalUser="+externaUserQqueryStr;
            }
            
            if(this.options.campaignParams != null){
            	_src += "&"+ this.options.campaignParams;
            }
            
            if(this.options.time != null){
            	_src += "&t="+ this.options.time;
            }
            
            iframe.setAttribute('src', _src);


            iframe.setAttribute('width', this.options.width);
            iframe.setAttribute('height', this.options.height);
            iframe.setAttribute('style', this.options.style);
            iframe.setAttribute('position', 'inherit');
            iframe.setAttribute('frameborder', '0');
            iframe.setAttribute('webkitallowfullscreen', '');
            iframe.setAttribute('mozallowfullscreen', '');
            iframe.setAttribute('allowfullscreen', '');
            iframe.setAttribute('allow', 'autoplay; fullscreen; microphone; camera');


            // Append iframe to element
            this.element.appendChild(iframe);

            this.iframeReceiver = document.getElementById(iframeId).contentWindow;
            	
            var _this = this;

        /*
            setTimeout(function(){
                _this.sendMessage();
            }, 4000)
        */
        }



        /**
        *   Starts playing the video
        */
        this.Cinema8Player.prototype.play = function(){
            var msg = {"name": "play"};
            return this.sendMessage(msg);
        }

        /**
        *   Pauses the currently playing video
        */
        this.Cinema8Player.prototype.pause = function(){
            var msg = {"name": "pause"};
            return this.sendMessage(msg);
        }

        this.Cinema8Player.prototype.duration = function(){
            if(isNull(this._sceneData) || isNull(this._sceneData.mediaContent)){
                 return null;
            }
            return this._sceneData.mediaContent.duration; 
        }
        
        this.Cinema8Player.prototype.watchTime = function(){
        	if(this._watchTime == undefined){
        		return 0;
        	}
        	
            return this._watchTime; 
        }
        
        /**
        *  Returns whether the audio/video is paused
        */
        this.Cinema8Player.prototype.paused = function(){
            return this._paused;
        }

        /**
        *  Sets or returns the volume of the audio/video
        */
        this.Cinema8Player.prototype.volume = function(vol){
            if(vol == null){
                return this._volume;
            }else{
                var msg = {"name": "setVolume", "value": vol};
                this.sendMessage(msg);
            }
        }
        
        
        this.Cinema8Player.prototype.updateSkinProperty = function(propName, value){
        	var skinProp = {"name": propName, "value": value}
            var msg = {"name": "updateSkinProperty", "value": skinProp};
            this.sendMessage(msg);
        }
        
        
        /**
         * Returns the html5 video object
         */
         this.Cinema8Player.prototype.video = function(){
              return this._video;
         }
         
        /**
        *  Sets or returns the current playback position in the audio/video (in seconds)
        */
        this.Cinema8Player.prototype.currentTime = function(time){
            if(time == null){
                return this._currentTime;
            }else{
                var msg = {"name": "setCurrentTime", "value": time};
                this.sendMessage(msg);
            }
        }



        /**
        *  Sets or returns the selected subtitles
        */
        this.Cinema8Player.prototype.subtitles = function(subtitles){
            if(subtitles == null){
                return this._subtitles;
            }else{
                var msg = {"name": "setSubtitles", "value": subtitles};
                this.sendMessage(msg);
            }
        }

        /**
        *  Sets or returns the selected subtitles
        */
        this.Cinema8Player.prototype.removeSubtitles = function(){
            var msg = {"name": "setSubtitles", "value": null};
            this.sendMessage(msg);
        }


        /**
        *  Send message to reciever
        */
        this.Cinema8Player.prototype.sendMessage = function(msg){
            this.iframeReceiver.postMessage("ivideo://"+JSON.stringify(msg), '*');
        }


        


        /**
        *  Returns Cinema8 Context
        */
        this.Cinema8Player.prototype.getContext = function(){
            return this._context;
        }







        /**
         * null/undefined checker
         * @param obj
         * @returns {Boolean}
         */
        function isNull(obj){
            if(obj == undefined || obj == null){
                return true;
            }

            return false;
        }

        function IDGenerator() {
             this.length = 16;
             this.timestamp = +new Date;

             var _getRandomInt = function( min, max ) {
                return Math.floor( Math.random() * ( max - min + 1 ) ) + min;
             }

             this.generate = function() {
                 var ts = this.timestamp.toString();
                 var parts = ts.split( "" ).reverse();
                 var id = "";

                 for( var i = 0; i < this.length; ++i ) {
                    var index = _getRandomInt( 0, parts.length - 1 );
                    id += parts[index];
                 }

                 return id;
             }


         }

         return Cinema8Player;

 }());
